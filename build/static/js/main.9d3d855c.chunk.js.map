{"version":3,"sources":["icons/cancel.png","components/Favorites/Favorites.js","actions/index.js","icons/estrella.png","icons/loupe.png","components/Buscador/Buscador.js","icons/clapperboard.png","components/NavBar/NavBar.js","components/Movie/Movie.js","App.js","serviceWorker.js","reducers/index.js","store/index.js","index.js"],"names":["ConnectedList","className","this","props","movies","map","peli","to","imdbID","Title","type","onClick","removeMovieFavorite","src","cancel","width","alt","Component","connect","state","moviesFavourites","id","payload","Buscador","title","handleChange","bind","event","setState","target","value","preventDefault","getMovies","onSubmit","e","handleSubmit","htmlFor","loupe","placeholder","autoComplete","onChange","Poster","addMovieFavorite","star","Year","moviesLoaded","dispatch","movie","titulo","fetch","then","response","json","NavBar","exact","Logo","height","Movie","getMovieDetail","match","params","Plot","Country","Genre","Director","Actors","React","movieDetail","App","Fragment","path","component","Favorites","Boolean","window","location","hostname","initialState","rootReducer","action","concat","Search","filter","store","createStore","compose","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9d3d855c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/cancel.1c2963ee.png\";","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from 'react-router-dom';\r\nimport './Favorites.css';\r\nimport {removeMovieFavorite} from '../../actions'\r\nimport cancel from '../../icons/cancel.png'\r\n\r\nexport class ConnectedList extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container_fav\">\r\n        <h2 className=\"title\">Películas Favoritas</h2>\r\n        <ul>\r\n          {this.props.movies && this.props.movies.map (peli =>\r\n            <div key={peli.imdbID} className='favs'>\r\n              <Link to={`/movie/${peli.imdbID}`} className='link'>\r\n                  <li className=\"list\">{peli.Title}</li>\r\n              </Link>\r\n              <button className=\"bt\" type=\"submit\"onClick={()=> this.props.removeMovieFavorite(peli.imdbID)} ><img src={cancel} width='20px' alt=\"fav\" /></button>\r\n            </div>)}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n   return {\r\n     movies: state.moviesFavourites\r\n   }\r\n}\r\n\r\nexport default connect (mapStateToProps,{removeMovieFavorite})(ConnectedList);\r\n","export function addMovieFavorite(payload) {\r\n    return { type: \"ADD_MOVIE_FAVORITE\", payload };\r\n  }\r\n  \r\n\r\n  // API THEMOVIEDB.ORG a9f89e28a9c52e268490a138c8218858 //\r\n  \r\n  export function getMovies(titulo) {\r\n    return function(dispatch) {\r\n      return fetch(\"https://www.omdbapi.com/?apikey=1bc6c554&s=\" + titulo)\r\n        .then(response => response.json())\r\n        .then(json => {\r\n          dispatch({ type: \"GET_MOVIES\", payload: json });\r\n        });\r\n    };\r\n  }\r\n\r\n  export function removeMovieFavorite(id) {\r\n    return { type: \"REMOVE_MOVIE_FAVORITE\", payload: id };\r\n  }\r\n\r\n  export function getMovieDetail(id) {\r\n    return function(dispatch) {\r\n        return fetch(\"https://www.omdbapi.com/?apikey=1bc6c554&i=\" + id)\r\n          .then(response => response.json())\r\n          .then(json => {\r\n            dispatch({ type: \"GET_MOVIE_DETAIL\", payload: json });\r\n          });\r\n      };\r\n  }","export default __webpack_public_path__ + \"static/media/estrella.d0cbd94e.png\";","export default __webpack_public_path__ + \"static/media/loupe.01572229.png\";","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from 'react-router-dom';\r\nimport './Buscador.css';\r\nimport { addMovieFavorite, getMovies } from '../../actions/index';\r\nimport star from '../../icons/estrella.png'\r\nimport loupe from '../../icons/loupe.png'\r\n\r\n\r\n\r\n\r\nexport class Buscador extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: \"\"\r\n    };\r\n    this.handleChange=this.handleChange.bind(this)\r\n  }\r\n  handleChange(event) {\r\n    this.setState({ title: event.target.value });\r\n  }\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    this.props.getMovies(this.state.title)\r\n  }\r\n\r\n  render() {\r\n    const { title } = this.state;\r\n    return (\r\n      <div className=\"contenedor\">\r\n        <div className=\"busqueda\">\r\n        <form className=\"form-container\" onSubmit={(e) => this.handleSubmit(e)}>\r\n          <div>\r\n            <label className=\"label\" htmlFor=\"title\">\r\n            <button className=\"boton-search\"  type=\"submit\"><img id='imge'src={loupe} width='15px' alt=\"search\" /></button>\r\n            </label>\r\n            <input\r\n              placeholder=\"Busca película o serie...\"\r\n              type=\"text\"\r\n              id=\"title\"\r\n              autoComplete=\"off\"\r\n              value={title}\r\n              onChange={(e) => this.handleChange(e)}\r\n            />\r\n          </div>\r\n        </form>\r\n        </div>\r\n        <ul>\r\n         {this.props.movies ?.map( peli => \r\n         <div className=\"lista-peliculas\" key={peli.imdbID}>\r\n              <Link to={`/movie/${peli.imdbID}`} className=\"titulo\">\r\n              <img id='post'src={peli.Poster}/>\r\n              </Link>\r\n              <div id='tityear'>\r\n                <div className=\"pel\">\r\n              <button className=\"icon\"  type=\"submit\" onClick={()=> this.props.addMovieFavorite({Title: peli.Title, imdbID: peli.imdbID})}>\r\n                <img  src={star} width='20px' alt=\"fav\" /> </button>\r\n              <Link to={`/movie/${peli.imdbID}`} className=\"titulo\">\r\n                <h4 id='tit'>{peli.Title}</h4>\r\n              </Link>\r\n              <p id='year'>{peli.Year}</p>\r\n                </div> \r\n              </div> \r\n         </div>\r\n        \r\n         )}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    movies: state.moviesLoaded\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    addMovieFavorite: movie => dispatch(addMovieFavorite(movie)),\r\n    getMovies: title => dispatch(getMovies(title))\r\n  };\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Buscador);\r\n","export default __webpack_public_path__ + \"static/media/clapperboard.a426d496.png\";","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport Logo from '../../icons/clapperboard.png'\r\nimport './Navbar.css';\r\n\r\nexport default function NavBar() {\r\n    return (\r\n        <header className=\"navbar\">\r\n            <NavLink className='home' exact to=\"/\" >\r\n            <div className='logo-pelis'>\r\n                <img id=\"logo\" src={Logo} width=\"30\" height=\"30\" className=\"d-inline-block align-top\" alt=\"\" />\r\n            <h4>Movies</h4>\r\n            </div>\r\n            </NavLink>\r\n            <nav>\r\n                <ul className=\"list\">\r\n                    \r\n                        <NavLink className='home' exact to=\"/\" >Home</NavLink>\r\n                        <NavLink className='fav' to=\"/favs\" >Favoritas</NavLink>\r\n                    \r\n                </ul>\r\n            </nav>\r\n        </header>\r\n    )\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getMovieDetail } from '../../actions/index';\r\n\r\nimport './Movie.css';\r\n\r\nclass Movie extends React.Component {\r\n\r\ncomponentDidMount(){\r\n    this.props.getMovieDetail(this.props.match.params.id)\r\n}\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"movie-detail\">\r\n               <h3 className='title'>{this.props.movie.Title}</h3>\r\n               <p className='sinopsis'>{this.props.movie.Plot}</p>\r\n               <img src={this.props.movie.Poster} className='poster_detail'/>\r\n                <ul className='descripcion'>\r\n               <li>Pais: {this.props.movie.Country}</li>\r\n               <li>Año: {this.props.movie.Year}</li>\r\n               <li>Genero: {this.props.movie.Genre}</li>\r\n               <li>Dierector: {this.props.movie.Director}</li>\r\n               <li>Reparto: {this.props.movie.Actors}</li>\r\n               </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        movie: state.movieDetail\r\n    }\r\n}\r\n\r\n\r\nexport default connect (mapStateToProps,{getMovieDetail})(Movie);","import React from \"react\";\r\n\r\nimport Favorites from \"./components/Favorites/Favorites\";\r\nimport Buscador from \"./components/Buscador/Buscador\";\r\nimport NavBar from \"./components/NavBar/NavBar\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Movie from \"./components/Movie/Movie\";\r\n\r\nfunction App() {\r\n  return (\r\n      <React.Fragment>\r\n          <NavBar />\r\n          <Route exact path=\"/\" component={Buscador} />\r\n          <Route path=\"/favs\" component={Favorites} />\r\n          <Route path=\"/movie/:id\" component={Movie} />\r\n      </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const initialState = {\r\n    moviesFavourites: [],\r\n    moviesLoaded: [],\r\n    movieDetail: {}\r\n  };\r\n\r\n  function rootReducer(state = initialState, action) {\r\n    if (action.type === \"ADD_MOVIE_FAVORITE\") {\r\n        return {\r\n          ...state,\r\n          moviesFavourites: state.moviesFavourites.concat(action.payload)\r\n        }\r\n    }\r\n    if (action.type === \"GET_MOVIES\") {\r\n        return {\r\n          ...state,\r\n          moviesLoaded: action.payload.Search\r\n        };\r\n    }\r\n    if (action.type === \"GET_MOVIE_DETAIL\") {\r\n        return {\r\n            ...state,\r\n            movieDetail: action.payload\r\n        };\r\n    }\r\n    if (action.type === \"REMOVE_MOVIE_FAVORITE\") {\r\n        return {\r\n            ...state,\r\n            moviesFavourites: state.moviesFavourites.filter(movie => movie.imdbID !== action.payload)\r\n        };\r\n    }\r\n    return state;\r\n  }\r\n  \r\n  export default rootReducer;","import {createStore, compose, applyMiddleware} from 'redux';\r\nimport rootReducer from \"../reducers/index\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    compose(applyMiddleware(thunk),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\r\n    \r\n  );\r\n  \r\n  export default store;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store/index\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n    </Provider>,\r\n\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}